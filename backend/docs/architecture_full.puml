@startuml OUR Search Backend Architecture

' Package definitions
package "Gateway Layer" {
  class GatewayController {
    + getProjects(): ResponseEntity<List<DisciplineDTO>>
    + getStudents(): ResponseEntity<List<DisciplineDTO>>
    + getAllFaculty(): ResponseEntity<List<DepartmentDTO>>
    + createStudent(RequestDTO): ResponseEntity
    + createFaculty(RequestDTO): ResponseEntity
    + createProject(RequestDTO): ResponseEntity
    + editStudent(RequestDTO): ResponseEntity
    + editFaculty(RequestDTO): ResponseEntity
    + editProject(RequestDTO): ResponseEntity
    + deleteStudent(RequestDTO): ResponseEntity
    + deleteFaculty(RequestDTO): ResponseEntity
    + deleteProject(RequestDTO): ResponseEntity
    + getCurrentProfile(): ResponseEntity
    + getFacultyProfile(): ResponseEntity
    + getDisciplines(): ResponseEntity
    + getMajors(): ResponseEntity
    + getResearchPeriods(): ResponseEntity
    + getUmbrellaTopics(): ResponseEntity
    + getDepartments(): ResponseEntity
  }

  class ModuleInvoker {
    - Map<Class<?>, ModuleController> moduleControllerMap
    + processConfig(ModuleConfig): ModuleResponse
    - validateConfig(ModuleConfig)
    - getRequestClass(ModuleConfig): Class<?>
  }
}

package "Core Module" {
  interface ModuleController {
    + processConfig(ModuleConfig): ModuleResponse
  }
}

package "Fetcher Module" {
  class FetcherModuleController {
    - Map<DirectType, Fetcher> directTypeFetcherMap
    - Map<FilteredType, Fetcher> filteredTypeFetcherMap
    + processConfig(ModuleConfig): ModuleResponse
    - handleDirectFetcher(FetcherRequest): FetcherResponse
    - handleFilteredFetcher(FetcherRequest): FetcherResponse
    - validateConfig(ModuleConfig)
  }

  interface Fetcher {
    + fetch(FetcherRequest): FetcherResponse
  }

  class DisciplineFetcher {
    + fetch(FetcherRequest): FetcherResponse
    - validateRequest(FetcherRequest)
  }

  class ProjectFetcher {
    + fetch(FetcherRequest): FetcherResponse
    - buildDisciplineWithMajors(Discipline): DisciplineWithMajors
    - buildMajorWithProjects(Major, Integer): MajorWithEntityCollection
    - validateRequest(FetcherRequest)
  }

  class StudentFetcher {
    + fetch(FetcherRequest): FetcherResponse
    - buildDisciplineWithMajors(Discipline): DisciplineWithMajors
    - buildMajorWithStudents(Major): MajorWithEntityCollection
    - validateRequest(FetcherRequest)
  }

  class FacultyFetcher {
    + fetch(FetcherRequest): FetcherResponse
    - buildDepartmentWithFaculty(Department): DepartmentWithFaculty
    - validateRequest(FetcherRequest)
  }
}

package "Profile Module" {
  class ProfileModuleController {
    - Map<ProfileTypeCase, ProfileCreator> profileCreatorMap
    - Map<UserRole, ProfileRetriever> profileRetrieverMap
    - Map<UserRole, ProfileEditor> profileEditorMap
    - Map<UserRole, ProfileDeleter> profileDeleterMap
    + processConfig(ModuleConfig): ModuleResponse
    - handleProfileCreation(CreateProfileRequest): CreateProfileResponse
    - handleProfileRetrieval(RetrieveProfileRequest): RetrieveProfileResponse
    - handleProfileEditing(EditProfileRequest): EditProfileResponse
    - handleProfileDeletion(DeleteProfileRequest): DeleteProfileResponse
    - validateConfig(ModuleConfig)
  }

  interface ProfileCreator {
    + createProfile(CreateProfileRequest): CreateProfileResponse
  }

  interface ProfileRetriever {
    + retrieveProfile(RetrieveProfileRequest): RetrieveProfileResponse
  }

  interface ProfileEditor {
    + editProfile(EditProfileRequest): EditProfileResponse
  }

  interface ProfileDeleter {
    + deleteProfile(DeleteProfileRequest): DeleteProfileResponse
  }

  class StudentProfileCreator {
    + createProfile(CreateProfileRequest): CreateProfileResponse
    - validateRequest(CreateProfileRequest)
    - validateStudentData(StudentProto)
  }

  class FacultyProfileCreator {
    + createProfile(CreateProfileRequest): CreateProfileResponse
    - validateRequest(CreateProfileRequest)
    - validateFacultyData(FacultyProto)
  }

  class StudentProfileRetriever {
    + retrieveProfile(RetrieveProfileRequest): RetrieveProfileResponse
    - validateRequest(RetrieveProfileRequest)
  }

  class FacultyProfileRetriever {
    + retrieveProfile(RetrieveProfileRequest): RetrieveProfileResponse
    - validateRequest(RetrieveProfileRequest)
    - validateUserRole(String)
  }

  class StudentProfileEditor {
    + editProfile(EditProfileRequest): EditProfileResponse
    - validateRequest(EditProfileRequest)
    - validateUserRole(String)
  }

  class FacultyProfileEditor {
    + editProfile(EditProfileRequest): EditProfileResponse
    - validateRequest(EditProfileRequest)
    - validateUserRole(String)
  }

  class StudentProfileDeleter {
    + deleteProfile(DeleteProfileRequest): DeleteProfileResponse
    - validateRequest(DeleteProfileRequest)
  }

  class FacultyProfileDeleter {
    + deleteProfile(DeleteProfileRequest): DeleteProfileResponse
    - validateRequest(DeleteProfileRequest)
  }
}

package "Project Module" {
  class ProjectModuleController {
    + processConfig(ModuleConfig): ModuleResponse
    - validateConfig(ModuleConfig)
  }

  class ProjectCreator {
    + createProject(CreateProjectRequest): CreateProjectResponse
    - validateRequest(CreateProjectRequest)
    - validateProjectData(ProjectProto)
  }

  class ProjectEditor {
    + editProject(EditProjectRequest): EditProjectResponse
    - validateRequest(EditProjectRequest)
    - validateProjectData(ProjectProto)
    - toProjectProtoWithoutFaculty(Project): ProjectProto
  }

  class ProjectDeleter {
    + deleteProject(DeleteProjectRequest): DeleteProjectResponse
  }
}

package "Database Layer" {
  package "Entities" {
    class Student {
      - id: Integer
      - firstName: String
      - lastName: String
      - email: String
      - undergradYear: Integer
      - graduationYear: Integer
      - interestReason: String
      - hasPriorExperience: Boolean
      - isActive: Boolean
    }

    class Faculty {
      - id: Integer
      - firstName: String
      - lastName: String
      - email: String
    }

    class Project {
      - id: Integer
      - name: String
      - description: String
      - desiredQualifications: String
      - isActive: Boolean
    }

    class Department {
      - id: Integer
      - name: String
    }

    class Major {
      - id: Integer
      - name: String
    }

    class Discipline {
      - id: Integer
      - name: String
    }

    class ResearchPeriod {
      - id: Integer
      - name: String
    }

    class UmbrellaTopic {
      - id: Integer
      - name: String
    }

    class User {
      - id: Integer
      - email: String
      - userRole: UserRole
      - createdAt: LocalDateTime
    }

    class Faq {
      - id: Integer
      - question: String
      - answer: String
      - faqType: FaqType
    }

    class EmailNotification {
      - id: Integer
      - body: String
      - subject: String
      - emailNotificationType: EmailNotificationType
    }
  }

  package "Repositories" {
    interface StudentRepository
    interface FacultyRepository
    interface ProjectRepository
    interface DepartmentRepository
    interface MajorRepository
    interface DisciplineRepository
    interface ResearchPeriodRepository
    interface UmbrellaTopicRepository
    interface UserRepository
    interface FaqRepository
    interface EmailNotificationRepository
  }

  package "Services" {
    class StudentService
    class FacultyService
    class ProjectService
    class DepartmentService
    class MajorService
    class DisciplineService
    class ResearchPeriodService
    class UmbrellaTopicService
    class UserService
    class FaqService
    class EmailNotificationService
  }

  package "Enums" {
    enum UserRole {
      STUDENT
      FACULTY
      ADMIN
    }

    enum FaqType {
      STUDENT
      FACULTY
      ADMIN
    }

    enum EmailNotificationType {
      STUDENTS
      FACULTY
    }
  }
}

package "Security" {
  class SecurityConfig
  class OAuthSuccessHandler
  class OAuthChecker implements AuthCheckerInterface {
    + getDefaultResponse(): Map<String, String>
    + isAuthenticated(Authentication): boolean
    + getAuthUserEmail(Authentication): String
  }

  class LogoutService implements LogoutHandler {
    + logoutCurrentUser(HttpServletRequest, HttpServletResponse, Authentication): boolean
  }

  class EmailValidator {
    + isValidEmail(String, String): boolean
  }

  class UserRequestValidator {
    + canMakeRequest(String, String): boolean
    - initializeRolePermissions(): Map<UserRole, Set<String>>
  }

  interface AuthCheckerInterface

  interface LogoutHandler
}

package "DTOs" {
  class DisciplineDTO
  class MajorDTO
  class ProjectDTO
  class StudentDTO
  class FacultyDTO
  class ResearchPeriodDTO
  class UmbrellaTopicDTO
  class DepartmentDTO
  class FacultyProfileDTO
  class CreateStudentRequestDTO
  class CreateFacultyRequestDTO
  class CreateProjectRequestDTO
  class CreateProjectResponseDTO
  class CreatedProjectDTO
  class DeleteRequestDTO
  class EditStudentRequestDTO
  class EditFacultyRequestDTO
  class EditMajorRequestDTO
  class EmailNotificationDTO
  class FaqDTO
  class FaqRequestDTO
}

package "Utils" {
  class ProtoConverter
  class ProjectHierarchyConverter
  class ClassStatusConverter
  class Constants
  class UserExpirationChecker

  package "Exceptions" {
    class ForbiddenDisciplineActionException
    class ForbiddenMajorActionException
  }
}

package "Protobuf Messages" {
  class ModuleConfig <<Protobuf>> {
    + module_request: FetcherRequest | ProfileRequest | ProjectRequest
  }

  class ModuleResponse <<Protobuf>> {
    + module_response: FetcherResponse | ProfileResponse | ProjectResponse
  }

  class FetcherRequest <<Protobuf>> {
    + fetcher_type: DirectFetcher | FilteredFetcher
  }

  class FetcherResponse <<Protobuf>> {
    + fetched_data: DisciplineCollection | ProjectHierarchy | DepartmentHierarchy
  }

  class ProfileRequest <<Protobuf>> {
    + operation_request: CreateProfileRequest | RetrieveProfileRequest | EditProfileRequest | DeleteProfileRequest
  }

  class ProfileResponse <<Protobuf>> {
    + operation_response: CreateProfileResponse | RetrieveProfileResponse | EditProfileResponse | DeleteProfileResponse
  }

  class ProjectRequest <<Protobuf>> {
    + operation_request: CreateProjectRequest | DeleteProjectRequest | EditProjectRequest
  }

  class ProjectResponse <<Protobuf>> {
    + operation_response: CreateProjectResponse | DeleteProjectResponse | EditProjectResponse
  }
}

' Interface Implementations
ModuleController <|.. FetcherModuleController
ModuleController <|.. ProfileModuleController
ModuleController <|.. ProjectModuleController
ModuleController <|.. ModuleInvoker

Fetcher <|.. DisciplineFetcher
Fetcher <|.. ProjectFetcher
Fetcher <|.. StudentFetcher
Fetcher <|.. FacultyFetcher

ProfileCreator <|.. StudentProfileCreator
ProfileCreator <|.. FacultyProfileCreator
ProfileRetriever <|.. StudentProfileRetriever
ProfileRetriever <|.. FacultyProfileRetriever
ProfileEditor <|.. StudentProfileEditor
ProfileEditor <|.. FacultyProfileEditor
ProfileDeleter <|.. StudentProfileDeleter
ProfileDeleter <|.. FacultyProfileDeleter

' Gateway Layer Relationships
GatewayController --> ModuleInvoker : uses
GatewayController --> ModuleConfig : constructs
GatewayController --> ModuleResponse : processes
GatewayController --> OAuthChecker : uses for auth checks
GatewayController --> UserService : uses
GatewayController --> DepartmentService : uses
GatewayController --> DisciplineService : uses
GatewayController --> MajorService : uses
GatewayController --> ResearchPeriodService : uses
GatewayController --> UmbrellaTopicService : uses
GatewayController --> FacultyService : uses
GatewayController --> StudentService : uses
GatewayController --> ProjectService : uses
GatewayController --> FaqService : uses
GatewayController --> EmailNotificationService : uses
GatewayController --> LogoutService : uses

ModuleInvoker --> FetcherModuleController : delegates fetcher requests
ModuleInvoker --> ProfileModuleController : delegates profile requests
ModuleInvoker --> ProjectModuleController : delegates project requests

' Fetcher Module Relationships
FetcherModuleController --> DisciplineFetcher : delegates DIRECT_TYPE_DISCIPLINES
FetcherModuleController --> ProjectFetcher : delegates FILTERED_TYPE_PROJECTS
FetcherModuleController --> StudentFetcher : delegates FILTERED_TYPE_STUDENTS
FetcherModuleController --> FacultyFetcher : delegates FILTERED_TYPE_FACULTY

DisciplineFetcher --> DisciplineService : uses
ProjectFetcher --> DisciplineService : uses
ProjectFetcher --> MajorService : uses
ProjectFetcher --> ProjectService : uses
StudentFetcher --> DisciplineService : uses
StudentFetcher --> MajorService : uses
StudentFetcher --> StudentService : uses
FacultyFetcher --> DepartmentService : uses
FacultyFetcher --> FacultyService : uses
FacultyFetcher --> ProjectService : uses

' Profile Module Relationships
ProfileModuleController --> StudentProfileCreator : delegates student creation
ProfileModuleController --> FacultyProfileCreator : delegates faculty creation
ProfileModuleController --> StudentProfileRetriever : delegates student retrieval
ProfileModuleController --> FacultyProfileRetriever : delegates faculty retrieval
ProfileModuleController --> StudentProfileEditor : delegates student editing
ProfileModuleController --> FacultyProfileEditor : delegates faculty editing
ProfileModuleController --> StudentProfileDeleter : delegates student deletion
ProfileModuleController --> FacultyProfileDeleter : delegates faculty deletion
ProfileModuleController --> UserService : uses

StudentProfileCreator --> StudentService : uses
StudentProfileCreator --> MajorService : uses
StudentProfileCreator --> ResearchPeriodService : uses
StudentProfileCreator --> UserService : uses
FacultyProfileCreator --> FacultyService : uses
FacultyProfileCreator --> DepartmentService : uses
FacultyProfileCreator --> UserService : uses

StudentProfileRetriever --> StudentService : uses
FacultyProfileRetriever --> FacultyService : uses
FacultyProfileRetriever --> ProjectService : uses
FacultyProfileRetriever --> UserService : uses

StudentProfileEditor --> StudentService : uses
StudentProfileEditor --> MajorService : uses
StudentProfileEditor --> ResearchPeriodService : uses
StudentProfileEditor --> UserService : uses
FacultyProfileEditor --> FacultyService : uses
FacultyProfileEditor --> DepartmentService : uses
FacultyProfileEditor --> UserService : uses

StudentProfileDeleter --> StudentService : uses
StudentProfileDeleter --> UserService : uses
FacultyProfileDeleter --> FacultyService : uses
FacultyProfileDeleter --> UserService : uses
FacultyProfileDeleter --> ProjectService : uses

' Project Module Relationships
ProjectModuleController --> ProjectCreator : delegates project creation
ProjectModuleController --> ProjectEditor : delegates project editing
ProjectModuleController --> ProjectDeleter : delegates project deletion

ProjectCreator --> ProjectService : uses
ProjectCreator --> FacultyService : uses
ProjectCreator --> MajorService : uses
ProjectCreator --> UmbrellaTopicService : uses
ProjectCreator --> ResearchPeriodService : uses

ProjectEditor --> ProjectService : uses
ProjectEditor --> MajorService : uses
ProjectEditor --> UmbrellaTopicService : uses
ProjectEditor --> ResearchPeriodService : uses

ProjectDeleter --> ProjectService : uses

' Database Service-Repository Relationships
StudentService --> StudentRepository : uses
FacultyService --> FacultyRepository : uses
ProjectService --> ProjectRepository : uses
DepartmentService --> DepartmentRepository : uses
MajorService --> MajorRepository : uses
DisciplineService --> DisciplineRepository : uses
ResearchPeriodService --> ResearchPeriodRepository : uses
UmbrellaTopicService --> UmbrellaTopicRepository : uses
UserService --> UserRepository : uses
FaqService --> FaqRepository : uses
EmailNotificationService --> EmailNotificationRepository : uses

' Entity Relationships
Student "*" -- "*" Major : has
Student "*" -- "*" ResearchPeriod : interested in
Student "*" -- "*" Discipline : disciplines
Faculty "*" -- "*" Department : belongs to
Project "*" -- "*" Major : requires
Project "*" -- "*" UmbrellaTopic : categorized by
Project "*" -- "*" ResearchPeriod : available in
Project "*" -- "*" Discipline : related to
Project "*" -- "1" Faculty : owned by
Major "*" -- "*" Discipline : belongs to

' Security Relationships
SecurityConfig --> OAuthSuccessHandler : configures
OAuthSuccessHandler --> EmailValidator : uses
OAuthSuccessHandler --> UserService : uses
OAuthSuccessHandler --> LogoutService : uses

' Utils Relationships
UserExpirationChecker --> UserService : uses
UserExpirationChecker --> ProfileModuleController : uses for deletion

@enduml