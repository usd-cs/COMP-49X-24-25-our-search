# DEV

# Frontend is web (80)
# Backend is an api (8080)
# OAuth2 connects to backend (8080)
#  - google authorized origin: http://localhost:8080 (Google's OAuth2 flow expects to connect directly to the backend, not a subpath)
#  - google redirect uri = http://localhost/login/oauth2/code/google

# What this does:
#  - Routes / to frontend:80.
#  - Routes /api/ to backend:8080
#  - Routes /oauth2/ to backend:8080/oauth2
#  - Routes /login/ to backend:8080/login

# Why so many locations?
#  - We only expose the servername localhost. It is the only external facing hostname. So any requests to frontend or backend need this servername.
#  - The frontend runs in the browser, which cannot directly access http://localhost:8080 (the backend) because the frontend service is its own internal network. 
#    Frontend service can only reach backend via localhost/api/.
#  - To begin authentication, Google OAuth2 has to send the user to localhost/oauth2/..., which gets routed by Nginx to the backend.
#  - After successful authentication, Google OAuth2 has to send the user to localhost/login/..., which gets routed by Nginx to the backend.

# Login flow:
# http://localhost -> http://frontend
# click login -> http://localhost/api -> http://localhost:8080 -> http://localhost/oauth2/authorization/google
# google sign in success -> http://localhost/login/oauth2/code/google -> http://localhost:8080/login...

events {}

http {
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://backend:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /oauth2/ {
            proxy_pass http://backend:8080/oauth2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /login/oauth2/code/google {
            proxy_pass http://backend:8080/login/oauth2/code/google;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}


# PROD

# events {}

# http {
#     server {
#         listen 80;
#         server_name localhost;
#         # server_name oursearch.dedyn.io;

#         location / {
#             return 301 https://$host$request_uri;
#         }
#     }
#     server {
#         listen 443 ssl;
#         server_name localhost;
#         # server_name oursearch.dedyn.io;

#         ssl_certificate         /etc/letsencrypt/live/oursearch.dedyn.io/fullchain.pem;
#         ssl_certificate_key     /etc/letsencrypt/live/oursearch.dedyn.io/privkey.pem;

#         location / { 
#             proxy_pass http://frontend:3000;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }

#         location /backend/ {
#             proxy_pass http://backend:8080;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#     }
# }